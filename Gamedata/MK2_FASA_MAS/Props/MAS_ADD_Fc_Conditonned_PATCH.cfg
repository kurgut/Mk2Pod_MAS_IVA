
// Various patches to MAS props that don't behave as they shoud
// patches MAS props to be conditionned by Master switches, defined in the part's MASFlightComputer module + various fixes :

// RETRO BUTTONS -- light anims : stock SAS modes :
@PROP[MAS_RB_SAS_AntiNormal]
{
	@MODULE[MASComponent]
	{
		@ANIMATION
		{
			@variable = 0.333 * (fc.Conditioned(fc.Select(fc.GetSAS() and (fc.GetSASMode() == 4), 2, 0)) + fc.Conditioned(fc.GetPersistentAsNumber("Backlight")))
		}
	}
}
@PROP[MAS_RB_SAS_AntiTarget]
{
	@MODULE[MASComponent]
	{
		@ANIMATION
		{
			@variable = 0.333 * (fc.Conditioned(fc.Select(fc.GetSAS() and (fc.GetSASMode() == 8), 2, 0)) + fc.Conditioned(fc.GetPersistentAsNumber("Backlight")))
		}
	}
}
@PROP[MAS_RB_SAS_ManeuverNode]
{
	@MODULE[MASComponent]
	{
		@ANIMATION
		{
			@variable = 0.333 * (fc.Conditioned(fc.Select(fc.GetSAS() and (fc.GetSASMode() == 9), 2, 0)) + fc.Conditioned(fc.GetPersistentAsNumber("Backlight")))
		}
	}
}
@PROP[MAS_RB_SAS_Normal]
{
	@MODULE[MASComponent]
	{
		@ANIMATION
		{
			@variable = 0.333 * (fc.Conditioned(fc.Select(fc.GetSAS() and (fc.GetSASMode() == 3), 2, 0)) + fc.Conditioned(fc.GetPersistentAsNumber("Backlight")))
		}
	}
}
@PROP[MAS_RB_SAS_Prograde]
{
	@MODULE[MASComponent]
	{
		@ANIMATION
		{
			@variable = 0.333 * (fc.Conditioned(fc.Select(fc.GetSAS() and (fc.GetSASMode() == 1), 2, 0)) + fc.Conditioned(fc.GetPersistentAsNumber("Backlight")))
		}
	}
}
@PROP[MAS_RB_SAS_RadialIn]
{
	@MODULE[MASComponent]
	{
		@ANIMATION
		{
			@variable = 0.333 * (fc.Conditioned(fc.Select(fc.GetSAS() and (fc.GetSASMode() == 5), 2, 0)) + fc.Conditioned(fc.GetPersistentAsNumber("Backlight")))
		}
	}
}
@PROP[MAS_RB_SAS_RadialOut]
{
	@MODULE[MASComponent]
	{
		@ANIMATION
		{
			@variable = 0.333 * (fc.Conditioned(fc.Select(fc.GetSAS() and (fc.GetSASMode() == 6), 2, 0)) + fc.Conditioned(fc.GetPersistentAsNumber("Backlight")))
		}
	}
}
@PROP[MAS_RB_SAS_Retrograde]
{
	@MODULE[MASComponent]
	{
		@ANIMATION
		{
			@variable = 0.333 * (fc.Conditioned(fc.Select(fc.GetSAS() and (fc.GetSASMode() == 2), 2, 0)) + fc.Conditioned(fc.GetPersistentAsNumber("Backlight")))
		}
	}
}
@PROP[MAS_RB_SAS_StabAssist]
{
	@MODULE[MASComponent]
	{
		@ANIMATION
		{
			@variable = 0.333 * (fc.Conditioned(fc.Select(fc.GetSAS() and (fc.GetSASMode() == 0), 2, 0)) + fc.Conditioned(fc.GetPersistentAsNumber("Backlight")))
		}
	}
}
@PROP[MAS_RB_SAS_Target]
{
	@MODULE[MASComponent]
	{
		@ANIMATION
		{
			@variable = 0.333 * (fc.Conditioned(fc.Select(fc.GetSAS() and (fc.GetSASMode() == 7), 2, 0)) + fc.Conditioned(fc.GetPersistentAsNumber("Backlight")))
		}
	}
}
// CLEAR TARGET / clear node:
@PROP[MAS_RB_TargetClear]
{
	@MODULE[MASComponent]
	{
		@ANIMATION
		{
			@variable = 0.333 * (fc.Conditioned(fc.Select(fc.TargetType() > 0, 2, 0)) + fc.Conditioned(fc.GetPersistentAsNumber("Backlight")))
		}
	}
}
@PROP[MAS_RB_NodeClear]
{
	@MODULE[MASComponent]
	{
		@ANIMATION
		{
			@variable = 0.333 * (fc.Conditioned(fc.Select(fc.ManeuverNodeExists() > 0, 2, 0)) + fc.Conditioned(fc.GetPersistentAsNumber("Backlight")))
		}
	}
}
// Chatterer talk :
@PROP[MAS_RB_ChattererTalk]
{
	@MODULE[MASComponent]
	{
		@ANIMATION
		{
			//@variable = 0.333 * (fc.Conditioned(fc.Select(chatterer.Available() and fc.CommNetCanCommunicate(), 2, 0)) + fc.Conditioned(fc.GetPersistentAsNumber("Backlight")))
			@variable = 0.333 * fc.Conditioned(fc.GetPersistentAsNumber("Backlight") + fc.Conditioned(fc.GetPersistentAsNumber("%AUTOID%") * 2))
		}
	}
}

// fix target vessel/moon TRANSLATION and light anims :
@PROP[MAS_RB_TargetMoon]
{
	@MODULE[MASComponent]
	{
		@COLLIDER_EVENT
		{
			@onClick = fc.SetPersistent("%AUTOID%", fc.TargetNextMoon())
			%onRelease = fc.SetPersistent("%AUTOID%", 0)
		}
		@TRANSLATION
		{
			@variable = fc.GetPersistentAsNumber("%AUTOID%")
		}
		@ANIMATION
		{
			@variable = 0.333 * (fc.Conditioned(fc.Select(fc.GetPersistentAsNumber("%AUTOID%") == 1, 2, 0)) + fc.Conditioned(fc.GetPersistentAsNumber("Backlight")))
		}
	}
}
@PROP[MAS_RB_TargetVessel]
{
	@MODULE[MASComponent]
	{
		@COLLIDER_EVENT
		{
			@onClick = fc.SetPersistent("%AUTOID%", fc.TargetNextVessel())
			%onRelease = fc.SetPersistent("%AUTOID%", 0)
		}
		@TRANSLATION
		{
			@variable = fc.GetPersistentAsNumber("%AUTOID%")
		}
		@ANIMATION
		{
			@variable = 0.333 * (fc.Conditioned(fc.Select(fc.GetPersistentAsNumber("%AUTOID%") == 1, 2, 0)) + fc.Conditioned(fc.GetPersistentAsNumber("Backlight")))
		}
	}
}

// ABORT button V2 :
@PROP[MAS_ABORTbuttonV2]
{
	@MODULE[MASComponent]
	{
		@ANIMATION
		{
			@variable = fc.Conditioned(fc.GetPersistentAsNumber("Backlight"))
		}
	}
}



